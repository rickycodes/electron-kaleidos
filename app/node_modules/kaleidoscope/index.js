/*global FileReader Image*/
'use strict'

const qs = require('qs')

module.exports = function (config, sa) {
  var DragDrop, Kaleidoscope, image, kaleidoscope, onMouseMoved, options, tr, tx, ty, update, preload
  var bind = function (fn, me) {
    return function () {
      return fn.apply(me, arguments)
    }
  }

  preload = qs('.preload')

  Kaleidoscope = (function () {
    Kaleidoscope.prototype.HALF_PI = Math.PI / 2

    Kaleidoscope.prototype.TWO_PI = Math.PI * 2

    function Kaleidoscope (options1) {
      var key, ref, ref1, val
      this.options = options1 != null ? options1 : {}
      this.defaults = {
        offsetRotation: 0.0,
        offsetScale: 1.0,
        offsetX: 0.0,
        offsetY: 0.0,
        radius: 800,
        slices: 12,
        zoom: 0.4
      }
      ref = this.defaults
      for (key in ref) {
        val = ref[key]
        this[key] = val
      }
      ref1 = this.options
      for (key in ref1) {
        val = ref1[key]
        this[key] = val
      }
      if (this.domElement == null) {
        this.domElement = document.createElement('canvas')
      }
      if (this.context == null) {
        this.context = this.domElement.getContext('2d')
      }
      if (this.image == null) {
        this.image = document.createElement('img')
      }
    }

    Kaleidoscope.prototype.draw = function () {
      var cx, i, index, ref, results, scale, step
      this.domElement.width = this.domElement.height = this.radius * 2
      this.context.fillStyle = this.context.createPattern(this.image, 'repeat')
      scale = this.zoom * (this.radius / Math.min(this.image.width, this.image.height))
      step = this.TWO_PI / this.slices
      cx = this.image.width / 2
      results = []
      for (index = i = 0, ref = this.slices; 0 <= ref ? i <= ref : i >= ref; index = 0 <= ref ? ++i : --i) {
        this.context.save()
        this.context.translate(this.radius, this.radius)
        this.context.rotate(index * step)
        this.context.beginPath()
        this.context.moveTo(-0.5, -0.5)
        this.context.arc(0, 0, this.radius, step * -0.51, step * 0.51)
        this.context.lineTo(0.5, 0.5)
        this.context.closePath()
        this.context.rotate(this.HALF_PI)
        this.context.scale(scale, scale)
        this.context.scale([-1, 1][index % 2], 1)
        this.context.translate(this.offsetX - cx, this.offsetY)
        this.context.rotate(this.offsetRotation)
        this.context.scale(this.offsetScale, this.offsetScale)
        this.context.fill()
        results.push(this.context.restore())
      }
      return results
    }

    return Kaleidoscope
  })()

  DragDrop = (function () {
    function DragDrop (callback, context, filter) {
      var disable
      this.callback = callback
      this.context = context != null ? context : document
      this.filter = filter != null ? filter : /^image/i
      this.onDrop = bind(this.onDrop, this)
      disable = function (event) {
        event.stopPropagation()
        return event.preventDefault()
      }
      this.context.addEventListener('dragleave', disable)
      this.context.addEventListener('dragenter', disable)
      this.context.addEventListener('dragover', disable)
      this.context.addEventListener('drop', this.onDrop, false)
    }

    DragDrop.prototype.onDrop = function (e) {
      var file, reader, dt
      reader = new FileReader()
      dt = e.dataTransfer
      if (dt.getData('URL')) {
        var img = new Image()
        img.src = dt.getData('URL')
        preload.setAttribute('style', 'display:inline-block')
        img.onload = function () {
          preload.setAttribute('style', 'display:none')
          kaleidoscope.image.src = img.src
        }
      }
      e.stopPropagation()
      e.preventDefault()
      file = dt.files[0]
      if (file === undefined) {
        return
      }
      if (this.filter.test(file.type)) {
        reader.onload = (function (_this) {
          return function (e) {
            return typeof _this.callback === 'function' ? _this.callback(e.target.result) : void 0
          }
        })(this)
        return reader.readAsDataURL(file)
      }
    }

    return DragDrop
  })()

  image = new Image()

  image.onload = (function () {
    return function () {
      return kaleidoscope.draw()
    }
  })()

  image.src = (config) ? config.image : 'img/lava.jpg'

  kaleidoscope = new Kaleidoscope({
    image: image,
    slices: (config) ? config.slices : 20
  })

  kaleidoscope.domElement.style.position = 'absolute'
  kaleidoscope.domElement.style.marginLeft = -kaleidoscope.radius + 'px'
  kaleidoscope.domElement.style.marginTop = -kaleidoscope.radius + 'px'
  kaleidoscope.domElement.style.left = '50%'
  kaleidoscope.domElement.style.top = '50%'
  kaleidoscope.domElement.setAttribute('class', 'kaleidoscope')

  document.body.appendChild(kaleidoscope.domElement)

  new DragDrop(function (data) {
    kaleidoscope.image.src = data
    return
  })

  tx = kaleidoscope.offsetX
  ty = kaleidoscope.offsetY
  tr = kaleidoscope.offsetRotation

  onMouseMoved = function (e) {
    var dx, dy, hx, hy
    // cx = window.innerWidth / 2
    // cy = window.innerHeight / 2
    dx = e.pageX / window.innerWidth
    dy = e.pageY / window.innerHeight
    hx = dx - 0.5
    hy = dy - 0.5
    tx = hx * kaleidoscope.radius * -2
    ty = hy * kaleidoscope.radius * 2
    tr = Math.atan2(hy, hx)
    return
  }

  // window.addEventListener('mousemove', onMouseMoved, false)

  options = config || {
    interactive: false,
    ease: 0.01
  };

  (update = (function () {
    return function () {
      var data = sa.frequencyByteData
      var dx, dy, hx, hy
      dx = data[data.length/2] / window.innerWidth
      dy = data[data.length/2] / window.innerHeight
      hx = dx - 0.5
      hy = dy - 0.5
      tx = hx * kaleidoscope.radius * -2
      ty = hy * kaleidoscope.radius * 2
      tr = Math.atan2(hy, hx)
      var delta, theta
      if (options.interactive) {
        delta = tr - kaleidoscope.offsetRotation
        theta = Math.atan2(Math.sin(delta), Math.cos(delta))
        kaleidoscope.offsetX += (tx - kaleidoscope.offsetX) * options.ease
        kaleidoscope.offsetY += (ty - kaleidoscope.offsetY) * options.ease
        kaleidoscope.offsetRotation += (theta - kaleidoscope.offsetRotation) * options.ease
        kaleidoscope.draw()
      }
      return setTimeout(update, 1000 / 60)
    }
  })(this))()
}
