/////////////////////////////////
// Spectrum Analyser
/////////////////////////////////
'use strict'

// https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode
const SpectrumAnalyzer = module.exports = function (track, binCount, smoothingTimeConstant) {
  var audio = document.createElement('audio')
  var Context = window['AudioContext'] || window['webkitAudioContext']

  audio.crossOrigin = 'anonymous'
  audio.src = track

  audio.currentTime = 0
  audio.play()

  audio.addEventListener('ended', function (e) {
    // console.log('loop!')
    this.currentTime = 0
    this.play()
  })

  this.context = new Context()
  this.analyzerNode = this.context.createAnalyser()
  this.audio = audio

  this.setBinCount(binCount)
  this.setSmoothingTimeConstant(smoothingTimeConstant)
  this.setSource(audio)
}

SpectrumAnalyzer.prototype = {
  setSource: function (source) {
    //this.source = source
    this.source = this.context.createMediaElementSource(source)
    this.source.connect(this.analyzerNode)
    this.analyzerNode.connect(this.context.destination)
  },

  setBinCount: function (binCount) {
    this.binCount = binCount
    this.analyzerNode.fftSize = binCount * 2

    this.frequencyByteData = new Uint8Array(binCount)  // frequency
    this.timeByteData = new Uint8Array(binCount)   // waveform
  },

  setSmoothingTimeConstant: function (smoothingTimeConstant) {
    this.analyzerNode.smoothingTimeConstant = smoothingTimeConstant
  },

  getFrequencyData: function () {
    return this.frequencyByteData
  },

  getTimeData: function () {
    return this.timeByteData
  },
  // not save if out of bounds
  getAverage: function (index, count) {
    var total = 0
    var start = index || 0
    var end = start + (count || this.binCount)

    for (var i = start; i < end; i++) {
      total += this.frequencyByteData[i]
    }

    return total / (end - start)
  },
  getAverageFloat:function (index, count) {
    return this.getAverage(index, count) / 255
  },

  updateSample: function () {
    this.analyzerNode.getByteFrequencyData(this.frequencyByteData)
    this.analyzerNode.getByteTimeDomainData(this.timeByteData)
  }
}
